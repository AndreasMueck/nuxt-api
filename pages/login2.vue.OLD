<script setup>
import { ref, useLazyFetch } from "#imports";
import { useToast } from "primevue/usetoast";
const toast = useToast();

const bem = useBem("block")

const accessToken = useState("accessToken", () => ""); // accessToken mit NULL initialisiert // useState ist nicht reaktiv in bezug auf HMR
const isAuthenticated = useState("authenticated", () => false); // User ist nicht authentifiziert

useHead({
    link: [{ rel: 'canonical', href: 'http://localhost:3000/' }],
    htmlAttrs: { lang: 'de' },
});

useSeoMeta({
    title: 'Login Auth',
    description: 'Hier ist eine Website mit Nuxt Hier ist eine Website mit Nuxt Hier ist eine Website mit Nuxt',
    // Opengraph
    ogTitle: 'My Amazing Site',
    ogDescription: 'Hier ist eine Website mit Nuxt Hier ist eine Website mit Nuxt Hier ist eine Website mit Nuxt',
    ogImage: 'https://ps.w.org/wonderm00ns-simple-facebook-open-graph-tags/assets/banner-1544x500.png',
    ogType: 'website',
    ogUrl: 'http://localhost:3000',
    ogLocale: 'de_DE',
    // Twitter
    twitterCard: 'summary_large_image',
})

definePageMeta({
    //layout: "custom",
});

// composables testing
const hello = useHello() // export named
const helloMars = useHelloMars() // export unnamed -> Dateiname wird zum Funktionsnamen

const pending = ref();
const data = ref();
const error = ref();

const formBody = ref({
    // Werte initialiseren die Input Felder -> automatisch ausgefüllt
    //email: 'golfcup2023@wak-online.de',
    email: "golfcup2023",
    password: "handicap",
});

const requestBody = {
    // Diese Angaben gehen in den Request-Body
    email: "",
    password: "",
}

const loading = ref(false); // Spin loader in button AUS - default
const authUrl = "http://directus8/huawei/auth/authenticate"

const login = async () => {

    loading.value = true; // Spin loader in button AN

    requestBody.email = formBody.value.email + "@wak-online.de";
    requestBody.password = formBody.value.password;

    const requestOptions = {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
    };

    try {
        const response = await fetch(authUrl, requestOptions);

        if (!response.ok) { // Nur wenn resource erreichbar ist, dann erscheint diese Fehler-Meldung, wenn z.B. der Server down ist, dann nicht
            const message = `RESPONSE NOT OK: ${response.status}`
            throw new Error(message) // Execution of the current function will stop and control will be passed to the first catch block in the call stack.
        } else {
            loading.value = false;
            toast.add({ severity: "success", summary: "Erfolg", detail: "Die Anmeldung hat funktioniert.", life: 5000 });
            const data = await response.json(); // returns a promise resolved to a JSON object
            console.log(data);
        }

    } catch (error) { // Fehlermeldung erscheint auch dann wenn Resource nicht erreichbar
        console.log('Fehlermeldung: ', error);
        console.log('Fehlermeldung: ', error.name);
        loading.value = false;
        toast.add({ severity: "error", summary: "Fehler", detail: "Es ist ein Fehler aufgetreten. Siehe Console.", life: 5000 });
    }



};

</script>

<template>
    <div>
        <div v-if="pending">Loading...</div>
        <div v-else-if="data">Todos: {{ data }}</div>
        <div v-else-if="error">Error: {{ error }}</div>
    </div>
    <div class="card">
        <div class="flex justify-content-center flex-wrap card-container blue-container">
            <div class="card sm:w-9 md:w-6">
                <h1>Hier sehen Sie eine H1 Headline</h1>
                <form @submit.prevent="login">
                    <div>
                        <div>
                            <LoginImage />
                            <div>
                                Anmelden (Test mit PrimeVue / Theme: saga-blue / Lato font)
                            </div>
                        </div>
                        <div class="field">
                            <label for="username">Benutzername</label>
                            <input id="username" type="text" v-model.lazy="formBody.email"
                                class="text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full" />
                        </div>
                        <div class="field">
                            <label for="password">Passwort</label>
                            <input id="password" type="password" v-model.lazy="formBody.password" autocomplete="off"
                                class="text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full" />
                        </div>
                        <div class="button-bar">
                            <Button type="submit" label="Anmelden" icon="pi pi-user" :loading="loading"></Button>
                            <Button type="reset" label="Reset" icon="pi pi-times" class="p-button-secondary" />
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div>
        <!-- Toast für Nachrichten-->
        <Toast position="bottom-right" />
        <!-- <div class="center-error" v-if="error">
            Error status code: {{ error.statusCode }}<br>
            Error status message: {{ error.statusMessage }}<br>
            Error code: {{ error.data.error.code }}<br>
            Error message: {{ error.data.error.message }}
            </div> -->
        <p>COMPOSABLES TEST<br />
            {{ hello }}<br />{{ helloMars }}</p>
        <!-- <p>Token:{{ accessToken }}</p>-->
        <div class="center-data" v-if="pending">
            <h1>Loading spinner ...</h1>
        </div>
        <!-- <div class="center-data" v-if="data">
            <h1>DATA:</h1>
            <myJson :data="data" :showIcon="true" />
        </div> -->
        <!-- <form @submit.prevent="login">
            <h1>Loginseite</h1>
            Benutzername: <input type="text" v-model.lazy="formBody.email"><br>
            Password: <input type="password" v-model.lazy="formBody.password" autocomplete="off"><br><br>
            <button type="submit">Anmelden</button>
            <MainButton type="submit" childclass="button grau">Anmelden (grauer Button)</MainButton>
        </form> -->
        <!-- <br><br>
        Testen von Button-Props, funktioniert!
        <br>
        <MainButton childclass="button rot">Roter Button ohne fallthrough attributes (hier mit props)</MainButton>
        <div>
            <ButtonTest class="gruen" id="test">Grüner Button mit fallthrough attributes (id,class,style)</ButtonTest>
        </div>-->
        <div>
            <nuxt-link to="/veelidate">Veelidate</nuxt-link><br />
            <nuxt-link to="/radio">Radio</nuxt-link><br />
            <nuxt-link to="/vee">Vee</nuxt-link><br />
        </div>
    </div>
</template>

<style scoped>
.button-bar {
    margin-top: 20px;
    display: flex;
    gap: 10px;
}

.center-data {
    margin: auto;
    width: 50%;
    border: 3px solid green;
    padding: 10px;
    word-wrap: break-word;
}

.center-error {
    margin: auto;
    width: 50%;
    border: 3px solid red;
    padding: 10px;
}

.gruen {
    background-color: green;
}
</style>
